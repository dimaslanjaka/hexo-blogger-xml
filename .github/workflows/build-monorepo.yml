name: Build Monorepo

on:
  push:
    branches: [ "monorepo" ]
    paths-ignore:
      - '**/*.tgz'
      - '**/*.gz'
      - '**/release*/**'
      - '**garbage-collector**'
      - '**codeql**'
      - "**/dist/**"
  pull_request:
    types:
      - closed
    paths-ignore:
      - '**/release*/**'
      - '**/*.tgz'
      - '**/*.gz'
      - '**/test*/**'
      - '**/dist/**'
  workflow_dispatch:

# run single job
concurrency:
  group: build-monorepo
  cancel-in-progress: true

jobs:
  build:
    env:
      NODE_OPTIONS: '--max_old_space_size=8192' #8192 4096 --expose-gc
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      node_version: 14.x
    runs-on: ubuntu-latest

    name: Build Monorepo
    steps:
      - uses: actions/checkout@v4
        with:
          # repository: dimaslanjaka/nodejs-package-types
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Set EOL git configs
        continue-on-error: true
        run: |
          git config core.eol lf
          git config core.autocrlf input
          git checkout-index --force --all

      - name: Pull & update submodules recursively
        continue-on-error: true
        run: |
          echo "init submodules"
          git submodule init
          git submodule foreach "git submodule init"
          echo "sync submodules"
          git submodule sync
          git submodule foreach "git submodule sync"
          echo "update submodules"
          mkdir -p bin >/dev/null 2>&1
          curl -L https://github.com/dimaslanjaka/bin/raw/master/bin/submodule-install > bin/submodule-install
          rm -rf .git/modules
          bash ./bin/submodule-install
          echo "disable githooks warning"
          git config advice.ignoredHook false
          git config core.eol lf
          git config core.autocrlf input
          git checkout-index --force --all

      - name: Set env
        id: set-env
        shell: bash
        run: |
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          echo "${GITHUB_WORKSPACE}/node_modules/.bin" >> $GITHUB_PATH
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_OUTPUT
          echo "GITHUB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "GITHUB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "GITHUB_COMMIT_URL=https://github.com/${{github.repository}}/commit/$(echo $GITHUB_SHA)" >> $GITHUB_ENV
          echo "GITHUB_COMMIT_URL=https://github.com/${{github.repository}}/commit/$(echo $GITHUB_SHA)" >> $GITHUB_OUTPUT
          echo "GITHUB_RUNNER_URL=https://github.com/${{github.repository}}/commit/${{github.sha}}/checks/${{github.run_id}}" >> $GITHUB_ENV
          echo "GITHUB_RUNNER_URL=https://github.com/${{github.repository}}/commit/${{github.sha}}/checks/${{github.run_id}}" >> $GITHUB_OUTPUT
          echo "CACHE_NPM=$(npm config get cache)" >> $GITHUB_ENV
          echo "CACHE_NPM=$(npm config get cache)" >> $GITHUB_OUTPUT
          YARN_CURRENT=$(yarn -v)
          YARN_BERRY=3.2.1
          if [[ "ok" == "$(echo | awk "(${YARN_CURRENT} > ${YARN_BERRY}) { print \"ok\"; }")" ]]; then
            echo "CACHE_YARN=$(yarn config get cacheFolder)" >> $GITHUB_ENV
            echo "CACHE_YARN=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
          else
            echo "CACHE_YARN=$(yarn cache dir)" >> $GITHUB_ENV
            echo "CACHE_YARN=$(yarn cache dir)" >> $GITHUB_OUTPUT
          fi
          echo "architecture=$(getconf LONG_BIT)" >> $GITHUB_ENV
          if [ -f "package-lock.json" ]; then
              echo "PACKAGE-MANAGER=npm" >> $GITHUB_OUTPUT
              echo "PACKAGE-MANAGER=npm" >> $GITHUB_ENV
          else
              echo "PACKAGE-MANAGER=yarn" >> $GITHUB_OUTPUT
              echo "PACKAGE-MANAGER=yarn" >> $GITHUB_ENV
          fi
          unameOut="$(uname -s)"
          case "${unameOut}" in
              Linux*)     machine=linux;;
              Darwin*)    machine=mac;;
              CYGWIN*)    machine=cygwin;;
              MINGW*)     machine=mingw;;
              *)          machine="unknown:${unameOut}"
          esac
          echo "machine=$machine" >> $GITHUB_OUTPUT
          echo "machine=$machine" >> $GITHUB_ENV

      - name: initialize nodejs
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node_version }}
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Enable corepack
        run: corepack enable

      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            **/.yarn
            ./release
            ./yarn.lock
            ./releases/yarn.lock
            **/node_modules
            **/tmp
            **/dist
          key: ${{ runner.os }}-${{ env.node_version }}
          restore-keys: |
            ${{ runner.os }}-${{ env.node_version }}
            ${{ runner.os }}-

      - name: Check Updates
        shell: bash
        continue-on-error: true
        run: npm run update --if-present

      - name: Install Global Packages
        run: npm i -g typescript ts-node gulp-cli hexo-cli webpack-cli

      - name: Install Legacy Peer Dependencies
        run: npm install --legacy-peer-deps
        id: install-legacy
        shell: bash
        continue-on-error: true

      - name: Install Verbose
        if: steps.install-legacy.outcome == 'failure'
        id: install-verbose
        continue-on-error: true
        shell: bash
        run: |
          rm -rf node_modules
          npm install --verbose

      - name: Install Update Binary
        id: install-update
        if: steps.install-verbose.outcome == 'failure'
        shell: bash
        run: |
          rm -rf node_modules
          npm install --no-shrinkwrap --update-binary
        continue-on-error: true

      - name: Clean Install
        id: install-clean
        shell: bash
        if: steps.install-update.outcome == 'failure'
        run: rm -rf node_modules package-lock.json && npm install

      - name: Dump
        shell: bash
        run: |
          echo "install-legacy.outcome ${{ steps.install-legacy.outcome }}"
          echo "install-legacy.conclusion ${{ steps.install-legacy.conclusion }}"
          echo "install-verbose.outcome ${{ steps.install-verbose.outcome }}"
          echo "install-verbose.conclusion ${{ steps.install-verbose.conclusion }}"
          echo "install-update.outcome ${{ steps.install-update.outcome }}"
          echo "install-update.conclusion ${{ steps.install-update.conclusion }}"
          echo "install-clean.outcome ${{ steps.install-clean.outcome }}"
          echo "install-clean.conclusion ${{ steps.install-clean.conclusion }}"
          echo "branch      : ${{ steps.set-env.outputs.GITHUB_BRANCH }}"
          echo "commit msg  : ${{ github.event.head_commit.message }}"
          echo "commit hash : ${{ steps.set-env.outputs.GITHUB_SHA_SHORT }}"
          echo "commit url  : ${{ steps.set-env.outputs.GITHUB_COMMIT_URL }}"
          echo "runner url  : ${{ steps.set-env.outputs.GITHUB_RUNNER_URL }}"
          echo "cache npm   : ${{ steps.set-env.outputs.CACHE_NPM }}"
          echo "cache yarn  : ${{ steps.set-env.outputs.CACHE_YARN }}"
          echo "package mgr : "${{ steps.set-env.outputs.PACKAGE-MANAGER }}""

      - name: Build
        run: npm run build --if-present
      - name: Pack
        run: npm run pack --if-present

      # https://github.com/marketplace/actions/verify-changed-files
      - name: Check if there are changes
        id: changes
        uses: tj-actions/verify-changed-files@v16
        with:
          files: |
            release
            dist
            lib
            !node_modules
            !tmp

      - shell: bash
        name: "What's changed?"
        run: |
          echo "Changed files: ${{ steps.changes.outputs.changed_files }}"

      - name: Git setup user email
        if: steps.changes.outputs.files_changed == 'true'
        continue-on-error: true
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
      - run: git add release
        if: steps.changes.outputs.files_changed == 'true'
        continue-on-error: true
      - run: git add dist
        if: steps.changes.outputs.files_changed == 'true'
        continue-on-error: true
      - run: git add lib
        if: steps.changes.outputs.files_changed == 'true'
        continue-on-error: true
      - run: git add postinstall.js packer.js .github
        if: steps.changes.outputs.files_changed == 'true'
        continue-on-error: true
      - run: git pull -X theirs
        name: Pull before push
        if: steps.changes.outputs.files_changed == 'true'
        continue-on-error: true
      - name: Git push
        if: steps.changes.outputs.files_changed == 'true'
        continue-on-error: true
        run: |
          git commit -m "Update build from ${{ env.GITHUB_COMMIT_URL }}" -m "commit hash: ${{ env.GITHUB_SHA_SHORT }}" -m "commit url: ${{ env.GITHUB_COMMIT_URL }}" -m "runner: ${{ env.GITHUB_RUNNER_URL }}"
          git push
